#!/bin/sh

# Añadir esta configuración en /root/.profile para personalizar el prompt para root
#prompt() {
#	[ "$PWD" = "$HOME" ] && dir='~' || dir="${PWD#*/}"
#	printf '\033[1;33m[%s]\033[0m \033[0;32m# \033[1;31m' "$dir"
#}
#PS1="\$(prompt)"

# Cargar alias
[ -r ~/.aliases ] && . ~/.aliases

# Prompt personal
PS1='$(printf "%b" "\033[1;32m$(get_working_directory)$(git_branch)\n"\
       	"\033[1;31m-> \033[0m"\
       	$(printf "\033[1;33m$\033[0m")"\033[1m") '

# Historial de comandos
if [[ ! -d "$TMPDIR" ]]; then
	TMPDIR="/tmp/$LOGNAME"
	mkdir -p -m 700 "$TMPDIR"
fi
HISTFILE=$TMPDIR/.ksh_history

set -o allexport			# Todos los nuevos parámetros son creados con el atributo 'export'
set -o vi				# Modo de edición

# Limpiar pantalla (funciona solo en modo EMACS)
#bind -m '^L'=clear-screen

#--------------------------------------------- Variables de entorno para nnn -----------------------------------------------------

#NNN_FALLBACK_OPENER="xdg-open"
NNN_OPENER='xdg-open'
NNN_OPTS='SUEdrx'			# Funciones habilitadas para NNN
NNN_BMS='d:~/Dropbox/Trabajo;t:~/Datos/Telegram;D:~/Descargas;s:~/Datos/Capturas;p:~/.local/share/Trash/files;P:~/Datos/.Trash-1000/files'   # Marcadores
NNN_PLUG='i:imgview;p:preview-tabbed;n:nuke'		# Plugins
NNN_USE_EDITOR=1			# Usar el $EDITOR para abrir archivos de texto
NNN_COLORS='2631' 	                # Usar un color distinto para cada contexto (pestañas)
NNN_TRASH=2				# Mover archivos a papelera en lugar de eliminar definitivamente
NNN_READER='zathura'			# Lector de archivos PDF
NNN_FIFO=/tmp/nnn.fifo			# Plugin oara vista previa
NNN_ARCHIVE="\\.(7z|a|ace|alz|arc|arj|bz|bz2|cab|cpio|deb|gz|jar|lha|lz|lzh|lzma|lzo|rar|rpm|rz|t7z|tar|tbz|tbz2|tgz|tlz|txz|tZ|tzo|war|xpi|xz|Z|zip)$"

#-------------------- Funciones --------------------
get_working_directory() {
	pwd | sed "s|^$HOME|~|"
}


# Manuales de programas con color
man() {
	LESS_TERMCAP_mb=$(printf "\e[1;31m") \
	LESS_TERMCAP_md=$(printf "\e[1;31m") \
	LESS_TERMCAP_me=$(printf "\e[0m") \
	LESS_TERMCAP_se=$(printf "\e[0m") \
	LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
	LESS_TERMCAP_ue=$(printf "\e[0m") \
	LESS_TERMCAP_us=$(printf "\e[1;32m") \
	command man "$@"
}

# Rama repositorio de github
git_branch() {
	BRANCH=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)

	if [ ! "${BRANCH}" = "" ]; then
#		STAT=$(git_dirty)
#		printf '\033[1;36m %s' " ${BRANCH}\033[1;33m${STAT}"
		printf '\033[1;36m %s' " ${BRANCH}"
	else
		printf ''
	fi
}

#git_dirty() {
#	status=$(git status 2>&1 | tee)
#	dirty=$(printf "${status}" 2> /dev/null | grep "modificado:" &> /dev/null; printf "$?")
#	untracked=$(printf "${status}" 2> /dev/null | grep "Archivos sin seguimiento" &> /dev/null; printf "$?")
#	ahead=$(printf "${status}" 2> /dev/null | grep "Tu rama está adelantada a" &> /dev/null; printf "$?")
#	newfile=$(printf "${status}" 2> /dev/null | grep "nuevo archivo:" &> /dev/null; printf "$?")
#	renamed=$(printf "${status}" 2> /dev/null | grep "renombrado:" &> /dev/null; printf "$?")
#	deleted=$(printf "${status}" 2> /dev/null | grep "borrado:" &> /dev/null; printf "$?")
#	bits=''

#	if [ "${ahead}" = "0" ]; then
#		bits="*${bits}"
#	fi
#	if [ "${renamed}" = "0" ]; then
#	        bits=">${bits}"
#	fi
#	if [ "${newfile}" = "0" ]; then
#	        bits="+${bits}"
#	fi
#	if [ "${untracked}" = "0" ]; then
#	        bits="?${bits}"
#	fi
#	if [ "${deleted}" = "0" ]; then
#	        bits="x${bits}"
#	fi
#	if [ "${dirty}" = "0" ]; then
#	        bits="!${bits}"
#	fi
#	if [ ! "${bits}" = "" ]; then
#	        echo " ${bits}"
#	else
#	        echo ""
#	fi
#}

# Extraer archivos comprimidos/empaquetados
extraer() {
	if [ -f "$1" ]; then
		case $1 in
			*.tar.bz2)
				bsdtar -xvjf "$1"
				;;
			*.tar.gz)
				bsdtar -xvzf "$1"
				;;
			*.rar)
				unrar x "$1"
				;;
			*.tar.xz)
				bsdtar -xvjf "$1"
				;;
			*.zip)
				bsdtar -xf "$1"
				;;
			*.7z)
				7z x "$1"
				;;
			*)
				echo "¿Qué rayos es '$1' y por qué estás intentando extraerlo?"
				;;
		esac
	else
		echo "'$1' ¿qué demonios es esto?"
	fi
}

# Comando personalizado para ls
ls() {
	local __lstmp=$(command ls -X -1 --color=always "$@")
	if [ ! $( echo "$__lstmp" | wc -l) -gt $LINES ]; then
		echo "$__lstmp"
	else
		command ls -C --color=always "$@"
	fi
}
